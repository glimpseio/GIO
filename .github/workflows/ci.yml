name: Glimpse CI
  
on:
  push:
    branches: '*'
    tags: '*'
  schedule:
    # run at 6AM & 6PM UTC
    - cron:  '0 6,18 * * *'

jobs:
  build:
    name: Glimpse CI
    runs-on: macos-11.0
    environment: Signing
    timeout-minutes: 120
    env:
      APP_NAME: Glimpse
      TEST_NAME: Glimpse
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1
        with:
          scheme: ${{ env.APP_NAME }}
          configuration: Debug

      - name: "Import Certificate: Distribution"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: "Create exportOptions.plist"
        run: 
          echo '<plist version="1.0"><dict><key>method</key><string>developer-id</string><key>teamID</key><string>${{ secrets.TEAM_ID }}</string></dict></plist>' > "${{ env.APP_NAME }}ExportOptions.plist"
          
      - name: "Export & Sign Release Build"
        run: 
          xcodebuild -exportArchive -archivePath "${{ env.APP_NAME }}.xcarchive" -exportPath Export -exportOptionsPlist "${{ env.APP_NAME }}ExportOptions.plist"

      # https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/resolving_common_notarization_issues
      - name: "Notarize Release Build"
        uses: hubomatic/hubomat@v0.0.10
        with:
          verbose: false
          timeout: 120 # minutes
          product-path: "Export/${{ env.APP_NAME }}.app"
          artifact-path: "Export/${{ env.APP_NAME }}.zip"
          team-id: ${{ secrets.TEAM_ID }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Check Code Signature"
        run: 
          codesign --deep -vvv --verify "Export/${{ env.APP_NAME }}.app"
          
      - name: "Check Gatekeeper"
        run: spctl -a -t exec -vv "Export/${{ env.APP_NAME }}.app"


      #- name: "Import Certificate: Distribution"
      #  uses: devbotsxyz/import-signing-certificate@main
      #  with:
      #    certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
      #    certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
      #    keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      
      #- name: "Make Export Folder"
      #  run: 
      #    mkdir -p Export/
          
      #- name: "Perform Archive Action"
      #  uses: devbotsxyz/xcode-archive@v1
      #  with:
      #    scheme: ${{ env.APP_NAME }}
      #    archive-path: Export/${{ env.APP_NAME }}.xcarchive
      #    configuration: Debug
    
      #- name: "Perform Archive Command"
      #  run: 
      #    xcodebuild -configuration Debug -scheme "Glimpse" archive -archivePath "Export/${{ env.APP_NAME }}.xcarchive" CODE_SIGNING_ALLOWED=NO

      #- name: "Export Plist"
      #  run: 
      #    echo '<plist version="1.0"><dict><key>method</key><string>developer-id</string><key>teamID</key><string>${{ secrets.TEAM_ID }}</string></dict></plist>' > "Export/${{ env.APP_NAME }}ExportOptions.plist"
          
      #- name: "Export Size"
      #  run: 
      #    du -skh Export/*/*/*
          
      #- name: "Export Archive"
      #  run: 
      #    xcodebuild -exportArchive -archivePath "Export/${{ env.APP_NAME }}.xcarchive" -exportPath Export/ -exportOptionsPlist "Export/${{ env.APP_NAME }}ExportOptions.plist" CODE_SIGNING_REQUIRED="NO" CODE_SIGNING_ALLOWED="NO" EXPANDED_CODE_SIGN_IDENTITY=""
      
      # https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/resolving_common_notarization_issues
      #- name: "Notarize Release Build"
      #  uses: hubomatic/hubomat@v0.0.10
      #  with:
      #    verbose: false
      #    timeout: 120 # minutes
      #    product-path: "Export/${{ env.APP_NAME }}.app"
      #    artifact-path: "Export/${{ env.APP_NAME }}.zip"
      #    # archive-path: "Export/${{ env.APP_NAME }}.xcarchive" # TODO
      #    team-id: ${{ secrets.TEAM_ID }}
      #    keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      #    certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
      #    certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
      #    appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
      #    appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      #- name: "Staple Release Build"
      #  uses: devbotsxyz/xcode-staple@v1
      #  with:
      #    product-path: "Export/${{env.APP_NAME }}.app"
      #    verbose: true

      - name: Package for Distribution
        run: ditto -c -k --keepParent "Export/${{ env.APP_NAME }}.app" "Export/${{ env.APP_NAME }}.zip"

      - name: Upload Build Artifact Zip
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}.zip
          path: Export/${{ env.APP_NAME }}.zip

      #- name: Test
      #  run: |
      #    xcodebuild -scheme "Glimpse" test CODE_SIGNING_ALLOWED=NO \
      #      -skip-testing:GlimpseTests/GlimpseTests/testLoadSampleGlimpses \
      #      -skip-testing:GlanceTests/VegaLiteTests/testCompleteSamples \
      #      -skip-testing:GlanceTests/VegaLiteTests/testExampleSamples \
      #      -skip-testing:GlanceTests/VegaLiteTests/testDateTemporalFormats \
      #      -skip-testing:VegaLiteTests/testSimpleSample \
      #      || echo "TOLERATING TEST FAILURES FOR NOW"

      #- name: Upload Test Logs
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: Logs.zip
      #    path: ~/Library/Developer/Xcode/DerivedData/GIO-*/Logs/

      #- name: Release
      #  uses: softprops/action-gh-release@v1
      #  if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #    body_path: RELEASE_NOTES.md
      #    files: |
      #      CHANGELOG.md
      #      RELEASE_NOTES.md
      #      ${{ env.APP_NAME }}.zip
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
